{# 
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
#}
"""
MCP Tools Integration Helper
Uses Strands' built-in MCP support.

Provides a synchronous interface for loading MCP tools into your agent.
This module handles the context management required by MCP connections.
"""

import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

# Global context manager to keep MCP connections alive
_mcp_context = None

def get_mcp_tools_sync(mcp_config: List[Dict[str, Any]]) -> List:
    """
    Get MCP tools synchronously using Strands' built-in support.
    
    This function handles the context management required by MCP connections
    and keeps them alive for the lifetime of the process.
    
    Args:
        mcp_config: List of MCP server configurations from .agent.yaml
        
    Returns:
        List of Strands-compatible tools from MCP servers
    """
    global _mcp_context
    
    if not mcp_config:
        return []
    
    try:
        from src.mcp_client import get_mcp_tools_with_context
        
        tools, context_manager = get_mcp_tools_with_context(mcp_config)
        
        if context_manager:
            # Keep the context alive globally
            _mcp_context = context_manager
            logger.info(f"âœ… Loaded {len(tools)} MCP tools")
        
        return tools
        
    except ImportError:
        logger.info("MCP not available. Install with: pip install mcp")
        return []
    except Exception as e:
        logger.warning(f"Failed to load MCP tools: {e}")
        return []

def cleanup_mcp():
    """Cleanup MCP connections."""
    global _mcp_context
    if _mcp_context:
        try:
            _mcp_context.close()
        except Exception as e:
            logger.warning(f"Error cleaning up MCP: {e}")
        _mcp_context = None

# Register cleanup on process exit
import atexit
atexit.register(cleanup_mcp) 